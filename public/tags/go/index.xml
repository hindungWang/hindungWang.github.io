<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Hindung's Blog</title><link>https://hindung.cn/tags/go/</link><description>Recent content in Go on Hindung's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 19 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://hindung.cn/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>K8s client-go初始化的几种方法</title><link>https://hindung.cn/posts/k8s-client/</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>https://hindung.cn/posts/k8s-client/</guid><description>简介 client-go是k8s的一个基础组件库，是用于与API-Server交互的http客户端。K8s中大部分组件都使用了这个库实现与API-Server的通信功能。除了能够对资源对象的增删改查，还可Watch一个对象、升级成websocket链接等等功能。
client-go支持四种客户端：RESTClient、ClientSet、DynamicClient、DiscoveryClient。这几个client可以相互转换。
RESTClient RESTClient是最基础的客户端，相当于最底层的基础结构，可以直接通过RESTClient提供的RESTful方法如Get()、Put()、Post()、Delete()进行交互。
一般而言，为了更为优雅的处理，需要进一步封装，通过Clientset封装RESTClient，然后再对外提供接口和服务。
可以通过ClientSet客户端获得：
client := cli.CoreV1().RESTClient().(*rest.RESTClient) ClientSet Clientset是调用Kubernetes资源对象最常用的client，可以操作所有的资源对象，包含RESTClient。需要制定Group、Version，然后根据Resource获取。
clientset,err := kubernetes.NewForConfig(config) sa, err := clientset.CoreV1().ServiceAccounts(&amp;#34;kube-system&amp;#34;).Get(&amp;#34;kube-shell-admin&amp;#34;, metav1.GetOptions{}) DynamicClient Dynamic client是一种动态的client，它能处理kubernetes所有的资源。不同于clientset，dynamic client返回的对象是一个map[string]interface{}。
dynamicClient,err := dynamic.NewForConfig(config) gvr := schema.GroupVersionResource{Version: &amp;#34;v1&amp;#34;,Resource: &amp;#34;pods&amp;#34;} unstructObjList,err := dynamicClient.Resource(gvr).Namespace(&amp;#34;dev&amp;#34;).List(context.TODO(),metav1.ListOptions{Limit: 100}) DiscoveryClient DiscoveryClient是发现客户端，主要用于发现kubernetes API Server所支持的资源组、资源版本、资源信息。除此之外，还可以将这些信息存储到本地，用户本地缓存，以减轻对Kubernetes API Server访问的压力。 kubectl的api-versions和api-resources命令输出也是通过DisconversyClient实现的。
discoveryClient,err := discovery.NewDiscoveryClientForConfig(config) APIGroup,APIResourceListSlice,err := discoveryClient.ServerGroupsAndResources() 这几种客户端的初始化都涉及到了入参config，即*rest.Config，这个是用于初始化客户端的所有配置信息。
rest.Config初始化 创建client前，需要先从初始化*rest.Config，这个*rest.Config可以从集群外的kubeconfig文件或者集群内部的 tokenFile 和 CAFile初始化（通过ServiceAcount自动挂载）。有以下几种方式：
集群外通过kubeconfig初始化 BuildConfigFromFlags方法从给定的url或者kubeconfig文件的文件夹路径去初始化config，如果不成功则会使用集群内部方法初始化config，如果不成功则返回一个默认的config。
// &amp;#34;k8s.io/client-go/tools/clientcmd&amp;#34; config, err := clientcmd.BuildConfigFromFlags(&amp;#34;&amp;#34;, *kubeconfig) if err != nil { panic(err.Error()) } 内存中通过kubeconfig字符串或者byte数组初始化 通过读取kubeconfig文件内容进行初始化一个config：</description></item><item><title>Go源码解读之sync.Cond</title><link>https://hindung.cn/posts/go-sync-cond/</link><pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate><guid>https://hindung.cn/posts/go-sync-cond/</guid><description>前言 前面🔗说过，Cond实现了一个条件变量，是等待或宣布一个事件发生的goroutines的汇合点。
就是说，使用sync.Cond可以做到多个协程等待某个协程通知的场景。
使用channel可以实现一读一写的场景，而Cond则实现多读一写的场景。
源码解析 简化版方法签名：
// Cond结构体 type Cond struct {} // NewCond 返回带Locker的Cond，这个Locker可以是 // *Mutex 或 *RWMutex func NewCond(l Locker) *Cond {} // 等待L的解锁并挂起goroutine func (c *Cond) Wait() {} // 唤醒1个因c阻塞的goroutine， // 如果在Signal之后才Wait会导致all goroutines are asleep - deadlock func (c *Cond) Signal() {} // 唤醒所有因c阻塞的goroutine // 如果在Broadcast之后才Wait会导致all goroutines are asleep - deadlock func (c *Cond) Broadcast() {} 因此，在Signal或者Broadcast前要先保证目标的协程已经进入了Wait状态，否则会导致死锁。因为Signal或者Broadcast只唤醒当前正在被Wait阻塞的协程。
Cond的定义：
// Copyright 2011 The Go Authors. All rights reserved. // Use of this source code is governed by a BSD-style // license that can be found in the LICENSE file.</description></item><item><title>Go源码解读之sync中的基本类型和使用场景</title><link>https://hindung.cn/posts/go-sync-type/</link><pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate><guid>https://hindung.cn/posts/go-sync-type/</guid><description>Overview 包链接🔗
sync包提供基本的同步原语，例如互斥锁。
除了Once和WaitGroup类型外，大多数都是供低级库例程使用的。
更高层次的同步最好通过channels和通信来完成。
从代码看，sync提供了几种类型：
Cond：条件变量 Locker：锁的接口定义 Map：协程并发安全的Map Mutex：互斥锁 Once：单次执行 Pool：池 RWMutex：读写锁 WaitGroup：等待组 几个类型分别对应不同的使用场景。
sync.Cond Cond实现了一个条件变量，是等待或宣布一个事件发生的goroutines的汇合点。
通俗的说，sync.Cond用来协调那些访问共享资源的goroutine，当共享资源发生变化时，通知被阻塞goroutine。
sync.Cond 经常用在多个 goroutine 等待一个 goroutine 通知（事件发生）的场景。
sync.Map Map就像Go中的map[interface{}]interface{}，但对于多个goroutine的并发使用是安全的，不需要额外的锁或协调。
使用map + sync.Mutex或者sync.RWMutex的方式也可以实现与sync.Map类似的功能，但是在某些场景下，sync.Map具有更高的性能：
Map类型针对两种常见用例进行了优化：
当给定key的条目仅被写入一次却被读取多次时，例如在仅增长的高速缓存中 当多个goroutine读取，写入和覆盖的key都不相关时 在这两种情况下，与与单独的Mutex或RWMutex + map 相比，使用Map可以显着减少锁争用。
sync.Mutex Mutex是一个相互排斥的锁。Mutex的零值是一个解锁的Mutex。
当调用Lock方法进行加锁时，如果锁已在使用中，则goroutine会阻塞，直到锁可用为止。 当调用UnLock方法进行解锁时，如果锁没有在使用，则会出现运行时错误。
锁定的互斥锁与特定的goroutine没有关联。允许一个goroutine锁定Mutex，然后安排另一个goroutine对其进行解锁。
sync.RWMutex RWMutex是一个读写器相互排斥的锁。 该锁可以由任意数量的读者或单一的写者持有。RWMutex的零值是一个解锁的mutex。
读读不互斥，读写互斥，写写互斥。
sync.Once Once的Do(f)方法保证只运行一次，即使f发生panic。 这常用在单例模式，配置文件加载，初始化这些场景下。
sync.Pool Pool是一组可以单独保存和检索的临时对象。 储存在池子里的任何对象都可能在任何时候被自动删除，而无需通知。 池可以安全地同时被多个goroutine使用。
Pool的作用是缓存已分配但未使用的项目，以便以后再使用，减轻垃圾收集器的压力。也就是说，它使建立高效、线程安全的自由列表变得容易。
池的一个适当的用途是管理一组临时项目，这些临时项目在包的独立客户端之间默默地共享，并可能被重复使用。Pool提供了一种在许多客户端之间分摊分配开销的方法。
当然，Pool并不适用于一些短命的对象池化。
相当于拿出来，做操作，再放回去，操作过的东西放回去的时候是啥样，拿出来的时候就是啥样的。也就是说，拿出来用的时候需要初始化数据或者清空。 如Gin的源码：https://github.com/gin-gonic/gin/blob/v1.7.1/gin.go#L439
// ServeHTTP conforms to the http.Handler interface. func (engine *Engine) ServeHTTP(w http.</description></item><item><title>深拷贝之循环引用</title><link>https://hindung.cn/posts/deep-copy/</link><pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate><guid>https://hindung.cn/posts/deep-copy/</guid><description>题目 实现如下结构体的深拷贝。
type Node struct { Data int Fields []*Node } 即指针指向的内存也需要Copy一份。
解析 观察结构体，由于Fields字段里存放的是指向Node结构体的指针切片，深拷贝时要考虑循环引用的问题，如：
struct a : data: 1 fields: b, c struct b: data: 2 fields: c struct c: data: 3 fields: a // 这里循环引用了a， c-&amp;gt;a-&amp;gt;b, c-&amp;gt;a 可以考虑使用map[*Node]*Node来判断是否有环的情况，即用map[src] = dst来保存拷贝过的节点。
代码 代码如下：
package main import ( &amp;#34;go/ast&amp;#34; &amp;#34;go/token&amp;#34; ) type Node struct { Data int Fields []*Node } // deep copy var M map[*Node]*Node func Dup(src *Node) *Node { if src == nil { return nil } node := &amp;amp;Node{ Data: src.</description></item><item><title>Go源码解读之sync/atomic</title><link>https://hindung.cn/posts/go-sync-atomic/</link><pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate><guid>https://hindung.cn/posts/go-sync-atomic/</guid><description>注：go version 1.16.x
Overview 从网站pkg.go.dev上可以看到，对应的解释。
atomic包提供了用于实现同步算法的低级原子内存原语。
可以分为几类操作：
Add操作：加减操作 CAS操作：先比较后赋值操作 Swap操作：赋值操作 Load操作：从某个地址中取值 Store操作：往某个地址赋值 Value类型：对任意类型的Load/Store操作封装 操作分类 Add操作 由AddT函数实现的加法操作在原子上等效于：
*addr += delta \\ 加上步长 正负数都可以 return *addr \\ 反回加后的结果 相关的方法有：
func AddInt32(addr *int32, delta int32) (new int32) func AddUint32(addr *uint32, delta uint32) (new uint32) func AddInt64(addr *int64, delta int64) (new int64) func AddUint64(addr *uint64, delta uint64) (new uint64) func AddUintptr(addr *uintptr, delta uintptr) (new uintptr) CAS操作 CAS即CompareAndSwap，这个函数主要就是先比较一下当前传入的地址的值是否和 old 值相等，如果相等，就赋值新值返回 true，如果不相等就返回 false.</description></item><item><title>使用Go遇到的坑</title><link>https://hindung.cn/posts/keng/</link><pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate><guid>https://hindung.cn/posts/keng/</guid><description>for range 语句中的值传递问题 package main import &amp;#34;fmt&amp;#34; var pow = []int{1, 2, 4} func main() { for _, v := range pow { v++ } for _, v := range pow { fmt.Println(v) } } //out put : 1 2 4 原因：for range创建了每个元素的副本，而不是直接返回每个元素的引用。
IPv4与IPv6格式问题  Go中IPv4的长度和IPv6的长度是一样的，都是16Byte存储，故不能使用len()函数去区别:
conn, err := net.Dial(&amp;#34;udp&amp;#34;, &amp;#34;8.9.10.11:2342&amp;#34;) if err != nil { fmt.Println(&amp;#34;Error&amp;#34;, err) } localaddr := conn.LocalAddr() addr, _ := net.ResolveUDPAddr(&amp;#34;udp&amp;#34;, localaddr.String()) ip := addr.IP fmt.</description></item><item><title>Golang实现优先队列</title><link>https://hindung.cn/posts/go-priority-queue/</link><pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate><guid>https://hindung.cn/posts/go-priority-queue/</guid><description>前言 由于刷题时偶尔会用到队列以及优先队列等数据结构，其他语言都有现成的实现，如C++的priority_queue等，使用非常方便，但是由于个人比较喜欢使用golang语言进行答题，但是go对队列以及优先队列的实现只提供了一个接口，即container/heap包中的heap数据结构，故实现还是要自己去码，这里做一个笔记。实现了heap接口来实现priority_queue，并且提供了其他方法的实现。
heap原理 go的container/heap包实现的是数据结构是数组构成的二叉树（完全二叉树），如下所示：
// 树中某个节点的值总是不大于或不小于其孩子节点的值； // 树中每个节点的子树都是堆树 // index 0 1 2 3 4 5 6 7 8 9 // index 1 2 3 4 5 6 7 8 9 10 // a[] = {4, 1, 3, 2, 16, 9, 10, 14, 8, 7} // 4 // / \ // 1 3 // / \ / \ // 2 16 9 10 // /\ / // 14 8 7 // 若取a[1]为堆顶最大或最小，a[i]的左子节点为a[2i],右子节点为a[2i+1],父节点为a[i/2]: // a[i] // / \ // a[2i] a[2i+1] // 若取a[0]为堆顶最大或最小，a[i]的左子节点为a[2i+1],右子节点为a[2i+2],父节点为a[(i-1)/2] // a[i] // / \ // a[2i+1] a[2i+2] 而container/heap包采用的是a[0]作为对顶，故左子、右子节点以及父节点表示为a[2i+1]、a[2i+2]、a[(i-1)/2]。</description></item><item><title>雪花算法</title><link>https://hindung.cn/posts/snowflake/</link><pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate><guid>https://hindung.cn/posts/snowflake/</guid><description>前言 工作项目中有使用到雪花算法(snowflake)，觉得很有意思，所以想深入了解一下实现的原理并做记录。
算法简介 什么是雪花算法 snowflake，雪花。所以snowflake算法就叫做雪花算法。最早是Twitter内部使用的分布式环境唯一ID生成算法。
解决了什么问题 那么，该算法主要解决了：
高并发分布式系统环境下ID不重复 基于时间戳，可以保证有序递增 不依赖第三方库或中间件 生成效率高 算法原理 使用统一不重复系统编号的服务器+毫秒级时间戳+递增序列化生成64bit长整型数字：
+-&amp;gt;1bit not use + 000000000000000000000000000000000000000000000000000000000000000 = 64 bit &amp;lt;--------------------------------------&amp;gt;&amp;lt;---+----&amp;gt;&amp;lt;----------&amp;gt; 41bit millisecond timestamp = 69 years | 12bit Inc num = 4096 v 10bit machine ID= 1024 64bit整数由以下部分组成：
第一位置零，1为负数，故不用； 41位表示毫秒级时间戳； 10位表示机器ID，最多可以部署在1024台服务器上； 12位表示1毫秒的内递增序列，从0开始，到4095； 也就是说同一毫秒内最多能生成4096个id，超出的话需要等待下一毫秒，雪花算法最多冲突等待1ms。
机器ID保证了系统内的机器唯一性，时间戳和递增序列号保证了时序递增。
实现思路 了解了唯一ID的结构之后就可以简单实现雪花算法（伪代码）：
machineID # 机器ID n # 递增序列 now := time().now().Unix() if now == last { # 如果是同1毫秒内 n++ # 自增1 if n &amp;gt; 4095 { # 超过4095，则等待下一毫秒 now = nexttime() n = 0 } } else { n = 0 last = now } ID = now &amp;lt;&amp;lt; 22 | mashineID &amp;lt;&amp;lt; 12 | n # 将结果拼接为64bit之后转换成十进制 深入源代码 雪花生成算法见：snowflake</description></item><item><title>Golang-channel</title><link>https://hindung.cn/posts/golang-channel/</link><pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate><guid>https://hindung.cn/posts/golang-channel/</guid><description>前言 本文主要记录平时使用Golang的channel对象是如何在内存中存储和实现的，包括channel的创建、发送、接收、实现和关闭，最佳实践等，有时还应该更加关注channel的阻塞问题，以及select底层实现与channel的选择执行。
channel与goroutine goroutine, to execute tasks independently, potentially in parallel. channels, for communication, synchronization between goroutine.
正如上面说的，goroutine是独立地，可能并行地执行任务。channel是服务与goroutine之间的通讯，同步等。
Go语言的并发模型是基于CSP的， Golang从CSP中吸收了Process/Channel。
channel是一种：
协程安全 可以在协程之间存储和传输值 先进先出 能够导致协程阻塞或不阻塞（block or unblock） 关于goroutine的内容以后在深入，本文就重点了解一下channel。
Do not communicate by sharing memory; instead, share memory by communicating.
这是Go语言的并发哲学。
下面就来详细了解一下golang是如何实现channel这个对象，并且如何实现goroutine之间的数据通信的。
channel的基本使用 var ch chan int //声明一个int类型的channel，注意，该语句仅声明，不初始化channel ch := make(chan int) //创建一个无缓冲的int型的channel，无缓冲的channel当放入1个元素后，后续的输入便会阻塞 ch := make(chan int, 10) //创建一个缓冲区大小为10的int型的channel ch &amp;lt;- x //将x发送到channel中，如果channel缓冲区满，则阻塞当前goroutine &amp;lt;- ch //从channel中接收一个值，如果缓冲区为空，则阻塞 x = &amp;lt;- ch //从channel中接收一个值并存到x中，如果缓冲区为空，则阻塞 x, ok = &amp;lt;- ch //从channel中接收一个值，如果channel关闭了，那么ok为false（在没有defaultselect语句的前提下），在channel未关闭且为空的情况下，会阻塞 close(ch) //关闭channel for item := range ch {} //等待并取出channel中的值，直到channel关闭，会阻塞 无缓冲区的channel 从无缓存的channel中读取消息会阻塞，直到goroutine向channel中发送消息；同理，向无缓存的channel 中发送消息也会阻塞，直到有goroutine从channel中读取消息。</description></item><item><title>Golang语言模型</title><link>https://hindung.cn/posts/go-lang/</link><pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate><guid>https://hindung.cn/posts/go-lang/</guid><description>前言 这篇笔记主要记录一下学习Go见到的各种数据类型，从数据类型在内存的分布上看了解其中的原理，主要包括：
基本类型（int, string, uint, int8, int16, byte, rune, unitptr, float32, float64, complex64, complex128, bool等） 数组和slice的内存模型（string是特殊的slice） 指针的内存模型及unitptr与unsafe.Pointer、普通指针 *T的区别 map的内存模型 struct的内存模型和字节对齐 channel、goroutine的内存模型以后单独记录 interface的内存模型已经在第一篇笔记里 Go的内存模型与C语言很像，所以了解C语言应该很容易理解Go的内存模型。
基本类型的内存模型 Go语言有18种基本的数据结构：
bool string rune byte int uint int8 uint8 int16 uint16 int32 uint32 int64 uint64 float32 float64 complex64 complex128 其中string和bool类型比较特殊，这个后面讨论。
然后 byte 类型是uint8的别名，rune是int32的别名。
平台相关的数据类型有：
uint：int32 或者是 int64，看机子类型 uintptr：足够表示指针大小的无符号整数类型 这些基本类型在内存中的表示如：
数组和切片 数组 对于数组来说，如：var arr = [5]byte{1,2,3,4,5}
对于arr这个[5]byte类型，他的内存就是5个连续的字节, 一个数组的定义同时包括了长度和类型。 比如：var a [4]int，那么就表示声明了一个类型是数组，元素类型是int，长度是4。这里需要注意的是Go语言的数组和C语言的不一样，C语言的数组是一个指针，指向数组的一个元素。但是在Go语言里面数组就是一个普通的值类型。而不是一个指向数组内存起始位置的指针，也不能和同类型的指针进行转化。
所以[4]int和[5]int表示两种完全不同的类型。
切片 在之前的一些golang基础里已经有一些切片类型的简单使用方法了，这里就来探究一下切片的底层数据结构和实现。</description></item><item><title>初探Gin框架</title><link>https://hindung.cn/posts/gin/</link><pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate><guid>https://hindung.cn/posts/gin/</guid><description>入门简介 Gin是一个高性能的HTTP web框架，用Go编写，目前托管在GitHub上：Gin 官方文档：Gin-doc 中文版：Gin-doc Gin框架的几个特性：
路由（Routing）：将请求映射到函数，支持动态路由。如/hello/:name 鉴权：统一、分组鉴权能力 模板：统一简化的HTML机制 中间件：一个请求经过多个中间件拦截最后到达DB，如logging .etc 其中比较关键的组件是router路由组件，gin使用的算法是radix 树，是trie 树（前缀树）的一种压缩版本，他们的区别是：假如存在三个单词：hello, hat, have，trie 树得到的数据结构是：
e - l - l - o / h - a - t \ v - e 总共9个节点。而radix树得到的数据结构是：
* / (ello) / * - h - * -(a) - * - (t) - * \ (ve) \ * 只需要5个节点，所以，radix树使用更小的内存，但是很难实现。详情请参考：what-is-the-difference-between-trie-and-radix-trie-data-structures
Gin使用的radix算法实现是：httprouter
原理及用法 路由Routing go语言本身内置了net/http库，封装了HTTP网络接口，Gin实现的web框架也是基于net/http库。
这个库的简单用法：
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { http.</description></item><item><title>Golang-interface的底层原理浅析</title><link>https://hindung.cn/posts/golang-interface/</link><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid>https://hindung.cn/posts/golang-interface/</guid><description>前言 Go语言在语法上相对C/C++来说，是比较简单的，基本语法多刷刷题目，然后工程的架构、目录规则等多看看其他开源项目，就应该能比较熟悉了。Go语言比较核心的设计 包括interface、内存模型、defer机制、goroutine实现与调度、cgo、数组与切片、Go编译器和连接器、GC实现这几大块。
注：所有源码基于 go version go1.13.5 windows/amd64
本篇笔记目的是了解interface的特性，并知道如何用好它。
Interface定义 是一种类型 可以定义0个或多个方法（一组行为） 可以嵌入其他接口（目标类型方法集中必须拥有包含嵌入接口方法在内的全部方法才算实现了该接口） 如：
type Notifier interface { notify() } 这就定义了一个名为Notifier的interface，实现这个interface很简单，实现notify方法即可：
type User struct { name　string } func (u *User) notify() { fmt.Printf(&amp;#34;Notify user name %s\n&amp;#34;, u.name) } 其他结构体也可以实现这个interface：
type Admin struct { name　string } func (a *Admin) notify() { fmt.Printf(&amp;#34;Sending admin name %s\n&amp;#34;, a.name) } 这种实现是DuckType：类型不需要显式声明它实现了某个接口：接口被隐式地实现。多个类型可以实现同一个接。
在调用notify的地方实现如下方法，即可实现多态性，即面向接口编程：
func sendNotify(n Notifier) { n.notify() } 函数sendNotify接受一个实现了Notifier接口的值作为参数。 既然任意一个实体类型都能实现该接口，那么这个函数可以针对任意实体类型的值来执行notify方法，调用notify时， 会根据对象的实际定义来实现不同的行为，从而实现多态行为。</description></item></channel></rss>