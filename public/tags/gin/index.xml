<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gin on Hindung Blogs</title><link>http://hindung.cn/tags/gin/</link><description>Recent content in Gin on Hindung Blogs</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 25 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://hindung.cn/tags/gin/index.xml" rel="self" type="application/rss+xml"/><item><title>初探Gin框架</title><link>http://hindung.cn/posts/3/</link><pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate><guid>http://hindung.cn/posts/3/</guid><description>入门简介 # Gin是一个高性能的HTTP web框架，用Go编写，目前托管在GitHub上：Gin 官方文档：Gin-doc 中文版：Gin-doc Gin框架的几个特性：
路由（Routing）：将请求映射到函数，支持动态路由。如/hello/:name 鉴权：统一、分组鉴权能力 模板：统一简化的HTML机制 中间件：一个请求经过多个中间件拦截最后到达DB，如logging .etc 其中比较关键的组件是router路由组件，gin使用的算法是radix 树，是trie 树（前缀树）的一种压缩版本，他们的区别是：假如存在三个单词：hello, hat, have，trie 树得到的数据结构是：
e - l - l - o / h - a - t \ v - e 总共9个节点。而radix树得到的数据结构是：
* / (ello) / * - h - * -(a) - * - (t) - * \ (ve) \ * 只需要5个节点，所以，radix树使用更小的内存，但是很难实现。详情请参考：what-is-the-difference-between-trie-and-radix-trie-data-structures
Gin使用的radix算法实现是：httprouter
原理及用法 # 路由Routing # go语言本身内置了net/http库，封装了HTTP网络接口，Gin实现的web框架也是基于net/http库。
这个库的简单用法：
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { http.</description></item></channel></rss>